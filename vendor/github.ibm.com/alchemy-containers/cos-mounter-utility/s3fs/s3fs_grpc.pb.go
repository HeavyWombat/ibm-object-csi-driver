// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.6.1
// source: s3fs.proto

package s3fs

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	S3FSService_Mount_FullMethodName   = "/s3fs.S3FSService/Mount"
	S3FSService_Unmount_FullMethodName = "/s3fs.S3FSService/Unmount"
)

// S3FSServiceClient is the client API for S3FSService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type S3FSServiceClient interface {
	Mount(ctx context.Context, in *MountRequest, opts ...grpc.CallOption) (*MountResponse, error)
	Unmount(ctx context.Context, in *UnmountRequest, opts ...grpc.CallOption) (*UnmountResponse, error)
}

type s3FSServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewS3FSServiceClient(cc grpc.ClientConnInterface) S3FSServiceClient {
	return &s3FSServiceClient{cc}
}

func (c *s3FSServiceClient) Mount(ctx context.Context, in *MountRequest, opts ...grpc.CallOption) (*MountResponse, error) {
	out := new(MountResponse)
	err := c.cc.Invoke(ctx, S3FSService_Mount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *s3FSServiceClient) Unmount(ctx context.Context, in *UnmountRequest, opts ...grpc.CallOption) (*UnmountResponse, error) {
	out := new(UnmountResponse)
	err := c.cc.Invoke(ctx, S3FSService_Unmount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// S3FSServiceServer is the server API for S3FSService service.
// All implementations must embed UnimplementedS3FSServiceServer
// for forward compatibility
type S3FSServiceServer interface {
	Mount(context.Context, *MountRequest) (*MountResponse, error)
	Unmount(context.Context, *UnmountRequest) (*UnmountResponse, error)
	mustEmbedUnimplementedS3FSServiceServer()
}

// UnimplementedS3FSServiceServer must be embedded to have forward compatible implementations.
type UnimplementedS3FSServiceServer struct {
}

func (UnimplementedS3FSServiceServer) Mount(context.Context, *MountRequest) (*MountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Mount not implemented")
}
func (UnimplementedS3FSServiceServer) Unmount(context.Context, *UnmountRequest) (*UnmountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unmount not implemented")
}
func (UnimplementedS3FSServiceServer) mustEmbedUnimplementedS3FSServiceServer() {}

// UnsafeS3FSServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to S3FSServiceServer will
// result in compilation errors.
type UnsafeS3FSServiceServer interface {
	mustEmbedUnimplementedS3FSServiceServer()
}

func RegisterS3FSServiceServer(s grpc.ServiceRegistrar, srv S3FSServiceServer) {
	s.RegisterService(&S3FSService_ServiceDesc, srv)
}

func _S3FSService_Mount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(S3FSServiceServer).Mount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: S3FSService_Mount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(S3FSServiceServer).Mount(ctx, req.(*MountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _S3FSService_Unmount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnmountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(S3FSServiceServer).Unmount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: S3FSService_Unmount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(S3FSServiceServer).Unmount(ctx, req.(*UnmountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// S3FSService_ServiceDesc is the grpc.ServiceDesc for S3FSService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var S3FSService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "s3fs.S3FSService",
	HandlerType: (*S3FSServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Mount",
			Handler:    _S3FSService_Mount_Handler,
		},
		{
			MethodName: "Unmount",
			Handler:    _S3FSService_Unmount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "s3fs.proto",
}
